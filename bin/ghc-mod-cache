#!/usr/bin/env python

import sys, os, re
import subprocess, hashlib

def get_project_dir():
    pw = os.getcwd()
    while True:
        if pw == "/":
            return (".", None)
        for f in os.listdir(pw):
            if re.search("\.cabal$", f):
                if os.path.isfile(os.path.join(pw, f)):
                    return (pw, f)
        pw = os.path.normpath(pw + "/..")

def encode_options(args):
    m = hashlib.sha224()
    module_name = None
    for s in args:
        if s and s[0] == '-':
            m.update(s)
        else:
            if module_name == None:
                module_name = s
            else:
                print >> sys.stderr, "ERROR: multiple module names?"
    if module_name:
        m.update(s)
    return (module_name, m.hexdigest())

def check_if_module_is_user(project_dir, module_name):
    if project_dir == "/":
        return (False, None)
    s = module_name
    s = s.replace(".", "/")
    s += ".hs"
    s = os.path.join(project_dir, s)
    return (os.path.exists(s), s)

def cache_outdated(cache_file, user_file):
    try:
        cf_time = os.path.getmtime(cache_file)
        uf_time = os.path.getmtime(user_file)
        return cf_time < uf_time
    except:
        return True

def record_ghc_mod_invocation(args):
    s = os.environ['HOME']
    log_file = os.path.join(s, ".ghcmodcache_log")
    with open(log_file, "a") as f:
        print >> f, args

def main():
    if len(sys.argv) < 2:
        estat = subprocess.call(["ghc-mod"] + sys.argv[1:])
        # record_ghc_mod_invocation(sys.argv)
        sys.exit(estat >> 8)

    if sys.argv[1] == "browse":
        project_dir, cabal_file_name = get_project_dir()
        ghc_mod_cache_dir = os.path.join(project_dir, ".ghcmodcache")
        if not os.path.exists(ghc_mod_cache_dir):
            os.mkdir(ghc_mod_cache_dir)
        module_name, canonical_option_coded = encode_options(sys.argv[2:])
        (is_user_module, module_path_if_any) = check_if_module_is_user(project_dir, module_name)
        cached_file_name = os.path.join(ghc_mod_cache_dir, module_name + "-" + canonical_option_coded)
        if not os.path.exists(cached_file_name) or (is_user_module and cache_outdated(cached_file_name, module_path_if_any)):
            with open(cached_file_name, "w") as f:
                if is_user_module:
                    os.chdir(project_dir)
                    estat = subprocess.call(["ghc-mod"] + sys.argv[1:], stdout=f)
                else:
                    estat = subprocess.call(["ghc-mod"] + sys.argv[1:], stdout=f)
            if estat != 0: sys.exit(estat >> 8)
        with open(cached_file_name, "r") as f:
            print f.read(),
            sys.exit(0)
        sys.exit(2)

    # record_ghc_mod_invocation(sys.argv)
    estat = subprocess.call(["ghc-mod"] + sys.argv[1:])
    sys.exit(estat >> 8)

if __name__ == "__main__":
    main()
